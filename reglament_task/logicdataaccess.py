import pandas as pd
from pathlib import Path
import re
from ugkorea.db.database import get_db_engine

# ===== –ü–£–¢–ò –ò –ù–ê–°–¢–†–û–ô–ö–ò =====
network_path = r"\\26.218.196.12\–∑–∞–∫–∞–∑—ã\–ï–≤–≥–µ–Ω–∏–π\New\–§–∞–π–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã Access"
file_name = "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞.xlsx"
file_path = Path(network_path) / file_name

if not file_path.exists():
    raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

df = pd.read_excel(file_path)

print("\nüì¶ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ (–¥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è):")
for col in df.columns:
    print(f"  {repr(col)}")

df.columns = [col.strip() for col in df.columns]

# ===== –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ö–û–õ–û–ù–û–ö =====
rename_map = {
    '–¶–ë': 'kod',
    '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–∫–∞–∑–µ': 'ne_ispolzuetsya_v_zakaze',
    '–ù–µ–ª–∏–∫–≤–∏–¥': 'nelikvid',
    '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª–∫–∏': 'zafiksirovat_minimalki',
    '–õ–∏—Å—Ç –û–∂–∏–¥–∞–Ω–∏—è': 'list_ozhidaniya',
    '–ú–∏–Ω–∏–º–∞–ª–∫–∞ –º–µ—Å—Ç–Ω–∞—è': 'minimal',  # –Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
}
df.rename(columns={k: v for k, v in rename_map.items() if k in df.columns}, inplace=True)

# ===== –û–ß–ò–°–¢–ö–ê –°–¢–†–û–ö–û–í–´–• –ó–ù–ê–ß–ï–ù–ò–ô =====
def clean_string(val):
    if isinstance(val, str):
        val = val.upper()
        val = re.sub(r'[\s\u200b\u200c\u200d\u200e\u200f\u202f\u00a0\r\n\t]+', '', val)
        return val
    return val

for col in df.select_dtypes(include='object').columns:
    df[col] = df[col].apply(clean_string)

# ===== –õ–û–ì–ò–ß–ï–°–ö–ò–ï –ö–û–õ–û–ù–ö–ò =====
bool_cols = ['ne_ispolzuetsya_v_zakaze', 'nelikvid', 'zafiksirovat_minimalki', 'list_ozhidaniya']
for col in bool_cols:
    if col not in df.columns:
        df[col] = False

print("\nüß™ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è. –ö–∞–∫–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç:")
for col in bool_cols:
    print(f"  {'‚úÖ' if col in df.columns else '‚ùå'} {col}")

print("\nüìä –ó–Ω–∞—á–µ–Ω–∏—è –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö:")
for col in bool_cols:
    print(f"  {col}: {df[col].sum()} True / {df[col].count()} –≤—Å–µ–≥–æ")

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–õ–û–ù–ö–ò minimal =====
if 'minimal' in df.columns:
    df['minimal'] = pd.to_numeric(df['minimal'], errors='coerce').fillna(0).astype(int)
else:
    df['minimal'] = 0

# ===== –û–ß–ò–°–¢–ö–ê –ò –£–î–ê–õ–ï–ù–ò–ï –ü–£–°–¢–´–• KOD =====
df['kod'] = df['kod'].astype(str).apply(clean_string)
df = df[df['kod'].notna() & (df['kod'] != '')]

# ===== –ó–ê–ì–†–£–ó–ö–ê –ò–ó –ë–ê–ó–´ –ò –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• =====
engine = get_db_engine()
nomenklatura_df = pd.read_sql("SELECT kod FROM nomenklaturaold", engine)
nomenklatura_df['kod'] = nomenklatura_df['kod'].astype(str).apply(clean_string)

existing_kods = set(df['kod'])
all_kods = set(nomenklatura_df['kod'])
missing_kods_set = all_kods - existing_kods

# –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ, None, –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ kody
clean_missing_kods = [k for k in missing_kods_set if k and clean_string(k) != '']

if clean_missing_kods:
    missing_kods_df = pd.DataFrame({'kod': clean_missing_kods})
    for col in bool_cols:
        missing_kods_df[col] = False
    missing_kods_df['minimal'] = 0
    df = pd.concat([df, missing_kods_df], ignore_index=True)

print("\nüìä –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö kod:")
for col in bool_cols:
    print(f"  {col}: {df[col].sum()} True / {df[col].count()} –≤—Å–µ–≥–æ")
print(f"  minimal: {df['minimal'].sum()} —Å—É–º–º–∞ / {df['minimal'].count()} –≤—Å–µ–≥–æ —Å—Ç—Ä–æ–∫")

# ===== –ó–ê–ü–ò–°–¨ –í –ë–ê–ó–£ =====
df = df[['kod'] + bool_cols + ['minimal']]
df.to_sql('accessdata', engine, if_exists='replace', index=False)

print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É 'accessdata'")
