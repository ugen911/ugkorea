import pandas as pd
import re
from ugkorea.db.database import get_db_engine

# ===== –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –æ—Ç –º—É—Å–æ—Ä–∞ =====
def clean_string(val):
    if isinstance(val, str):
        val = val.upper()
        val = re.sub(r'[\s\u200b\u200c\u200d\u200e\u200f\u202f\u00a0\r\n\t]+', '', val)
        return val
    return val

# ===== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ =====
engine = get_db_engine()

# ===== –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö =====
nomenklatura_df = pd.read_sql("SELECT kod FROM nomenklaturaold", engine)
accessdata_df = pd.read_sql("SELECT * FROM accessdata", engine)

# ===== –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ =====
nomenklatura_df['kod'] = nomenklatura_df['kod'].astype(str).apply(clean_string)
accessdata_df['kod'] = accessdata_df['kod'].astype(str).apply(clean_string)

# ===== –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –∏ None kod =====
nomenklatura_df = nomenklatura_df[nomenklatura_df['kod'].notna() & (nomenklatura_df['kod'] != '')]

# ===== –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö kod =====
existing_kods = set(accessdata_df['kod'])
all_kods = set(nomenklatura_df['kod'])
missing_kods = all_kods - existing_kods

# ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö kod =====
if missing_kods:
    print(f"üîÑ –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ kody: {len(missing_kods)}")
    new_rows = pd.DataFrame({'kod': list(missing_kods)})
    # –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    bool_cols = ['ne_ispolzuetsya_v_zakaze', 'nelikvid', 'zafiksirovat_minimalki', 'list_ozhidaniya']
    for col in bool_cols:
        new_rows[col] = False
    # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
    accessdata_df = pd.concat([accessdata_df, new_rows], ignore_index=True)
else:
    print("‚úÖ –í—Å–µ kody –∏–∑ nomenklaturaold —É–∂–µ –µ—Å—Ç—å –≤ accessdata ‚Äî –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ.")

# ===== –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å accessdata =====
accessdata_df.to_sql('accessdata', engine, if_exists='replace', index=False)
print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'accessdata' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
